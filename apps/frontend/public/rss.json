{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nirjan Khadka's Blog",
    "home_page_url": "nirjan.dev",
    "feed_url": "nirjan.dev/rss.json",
    "description": "I write about different web technologies like HTML, CSS, JavaScript, Svelte, Vue, Storybook, Node.js, SVG, WebGL, web animation and best coding practices.",
    "icon": "nirjan.dev/logo.png",
    "items": [
        {
            "id": "nirjan.dev/blog/moving-to-a-tech-lead-role-working-on-more-side-projects-learning-sveltekit-and-c-sharp-2022-review",
            "content_html": "<h2>New role at work</h2><p>I was officially promoted to the Technical Lead role at <a href=\"https://www.gfinityplc.com/gfinity-digtial-media/\">Gfinity Digital Media</a>. This has meant shifting my focus more towards management than coding. While there are some aspects of the role that I don&#x27;t enjoy as much, like an increase in meetings and process management, I&#x27;m excited to be able to play a bigger role in shaping the vision and strategy of the company. I&#x27;ve also really enjoyed improving the workflow of my team and helping them grow as we work to make our sites better with each release.</p><h2>Major accomplishments</h2><p>Together with my amazing team, we were able to accomplish quite a lot. Some of the highlights include:</p><ul><li>Migrating two new sites from WordPress to our custom Manifold tech stack</li><li>Adding a suite of automation tools to help our content team produce better content faster</li><li>Improving our personalization tech to serve more personalized promotions on our network</li><li>Working with the <a href=\"https://www.stockinformer.com/\">Stockinformer</a> team to add a custom products’ widget on our sites that can track the stock and prices of products in almost real-time</li><li>Faster and smoother editing experience for larger articles in our CMS</li><li>More fine-grained access controls for our CMS</li><li>More UI improvements to large sections of our sites like navigation, search, article cards, image and video galleries, etc</li><li>Improved the speed of RSS feed and sitemap generation significantly</li><li>New Ad placement algorithm to improve the UX of our sites while boosting ad revenue and impressions</li><li>Started adding automated tests for the most important parts of our codebase</li><li>Improvements to documentation and product analytics</li></ul><h2>Things I learned in 2022</h2><p>I&#x27;ve been able to learn a lot about management this year, but that has limited my ability to learn new technical skills. To make up for this, I&#x27;ve made a conscious effort to set aside personal time to work on side projects. Some of the things I&#x27;ve learned or delved deeper into this year include:</p><ul><li>Started learning about C# and dotnet</li><li>Learned <a href=\"https://nextjs.org/\">Next.js</a> and migrated my personal site from <a href=\"https://elderguide.com/tech/elderjs/\">Elder.js</a> to Next.js</li><li>Started learning <a href=\"https://kit.svelte.dev/\">Sveltekit</a></li><li>Tried out <a href=\"https://nuxt.com/v3\">Nuxt 3</a></li><li>Currently building a side-project using <a href=\"https://supabase.com/\">Supabase</a> and Sveltekit</li><li>Moved my site from markdown to <a href=\"https://www.sanity.io/\">Sanity.io</a></li><li>Started Learning <a href=\"https://cloud.google.com/bigquery/\">Google BigQuery</a> and <a href=\"https://datastudio.google.com/\">Google DataStudio</a></li><li>Did the <a href=\"https://seofordevs.com/\">SEO for Devs course</a></li></ul><p>One of the main takeaways I&#x27;ve had this year is the importance of being clinical in deciding where to spend my time and energy. I also plan to be more consistent with my &quot;learning in public&quot; approach and not worry so much about perfection.</p><h2>Things I want to learn in 2023</h2><p>I already have a huge list of things I want to learn in 2023. This may change in the future but here are the things I want to learn next year:</p><ul><li>More Sveltekit (I really like the progressive enhancement concepts and the simplicity of the dev experience)</li><li>More Supabase and Postgres (I want to do more side-projects using supabase and want to dive deeper into Postgres too)</li><li>Improving my SEO knowledge (while ChatGPT is a threat to google, I don’t see the value of SEO skills declining for at least another decade)</li><li>Improving my backend skills (I want to get some experience with more backend technologies so that I can be a bit more well-rounded)</li><li>Marketing (I want to be able to market my side-projects and start generating some revenue from them)</li><li>Writing (I want to write more in 2023 and keep improving my writing and communication skills)</li><li>Machine Learning and AI models</li><li>Finally, I want to continue improving my team leadership skills and finding ways to better support and empower my team.</li></ul><h2>My focus in 2023</h2><p>I’m honestly looking forward to 2023. I want to launch a couple of products and learn how to market them. Furthermore, I’m also looking forward to doing more svelte and learning more about backend technologies. It’s going to be hard, but I’m going to try to write a lot more and document my journey in 2023 as I build and learn new things along the way. Happy new year, everyone! Hope you have a great year ahead.</p>",
            "url": "nirjan.dev/blog/moving-to-a-tech-lead-role-working-on-more-side-projects-learning-sveltekit-and-c-sharp-2022-review",
            "title": "Moving to a Tech Lead role, Working on More Side projects, Learning Sveltekit and C# | 2022 review",
            "summary": "It's that time of the year again – the end of the year – and it's a great opportunity to reflect on the past 12 months and all that we've accomplished. This year has flown by, but it's been a year of growth and learning for me. I also wrote about my experience in 2021 if you want to take a look at how that went down. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogmoving-to-a-tech-lead-role-working-on-more-side-projects-learning-sveltekit-and-c-sharp-2022-review\">full post here <a /></p>",
            "date_modified": "1970-01-01T00:00:00.000Z"
        },
        {
            "id": "nirjan.dev/blog/11-easy-tips-to-fix-bugs-and-debug-your-code-faster",
            "content_html": "<h2>1. Gather info</h2><p>Your dev tools are your best friends during this step. Look for error messages in the console or your logging tool of choice. Try to reproduce your error by focusing on certain parts of your app. Look at the end-game. Ask yourself what are you trying to do? Try to be focused instead of looking everywhere. The better you get at filtering logs, the easier this will get.</p><p>Can you build a simpler version some place else like <a href=\"https://codepen.io\">codepen</a>, <a href=\"https://codesandbox.io/\">codesandbox</a>, <a href=\"https://stackblitz.com/\">stackblitz</a>, etc?</p><p>You need to be analytical in this step of the process and think like a detective.</p><h2>2. Go through your code</h2><p>Actually read your code – don&#x27;t skim it. Think about how the code is actually working. Follow the control flow of the code. If you have a whiteboard or even a notebook, then use that in this step. Try to visualize your code and create a mental model of how it&#x27;s working. Can you spot any logical issues with your code? This step can also help you figure out if you need to refactor your code, too. If it&#x27;s hard to read and reason about then when you&#x27;re done fixing the bug, you should also make a note of coming back to this and refactoring it.</p><h2>3. Stay calm and take a break</h2><p>It&#x27;s easy to get nervous or worked up when the stakes are high, but panicking won&#x27;t help. Don&#x27;t stress out about finding the bug. Take a 10-minute walk or take deep breaths, take a shower, stretch, anything that will help clear your mind.</p><p>Sometimes our subconscious is a much better coder than we are. We can stumble upon the fix when we least expect it. This is also a good time to ask for help if you are working in a team. Normally, I ask for help if I get stuck on a problem for more than <strong>2 hours without any progress</strong>.</p><p>You don&#x27;t want to go to your teammates for every small issue. But there is also no point in wasting hours of your time if they can help you fix it in minutes.</p><h2>4. Make it simple</h2><p>Make your code simpler, break it into smaller parts. Limit the number of inputs and outputs. Get it working in a limited capacity. (e.g. safe mode, Codepen, etc.)</p><p>Comment out major sections of code until you have a working example. Ask yourself, does this issue exist outside the framework? Does this work in a clean environment? Sometimes the bugs can exist outside your code. It might just be a bug in a third party library.</p><h2>5. Test in all environments</h2><p>Testing in different environments can help you discover the cause of your errors quicker. You should be able to take a look at the problem at different levels. Does it work locally but not on the server? Does it work in other browsers? Is it breaking only on mobile and not desktop? Tools like <a href=\"https://www.lambdatest.com/\">lambdatest</a> and <a href=\"https://www.browserstack.com/\">browserstack</a> are great for this.</p><h2>6. Talk it over</h2><p>Getting the perspective of another developer can be extremely helpful. Even talking to a non developer about what you are trying to do can sometimes help you get to the root of your issue. Even if you&#x27;re alone, just saying the problem out loud can be helpful.</p><h2>7. Use Git</h2><p>Commit your code often. If you&#x27;re worrying about having too many commits in your branch, then you can <a href=\"https://www.git-tower.com/learn/git/faq/git-squash/\">squash them</a> when you&#x27;re done. If your code commits are up-to-date, you can change code without fear of deleting things. Just revert to a previous commit once you find the issue and fix it. You can use git features like <a href=\"https://www.git-scm.com/docs/git-stash\">stashing</a> to try out different things.</p><h2>8. Don&#x27;t jump to solutions</h2><p>Take the time to dissect the problem. Question your assumptions. If you&#x27;re thinking It can&#x27;t possibly be a problem with x, then it might actually be a problem with x. Nothing should be off the table. Sometimes the cause of your bugs are in the place you least expected.</p><h2>9. Get good at pattern matching</h2><p>This comes with experience. After fixing a lot of bugs throughout your career, you&#x27;ll notice yourself asking the same questions. When did this problem start? Did we deploy any code? Did we change any logic? X bugs tend to happen when Y happens. This is mostly about figuring out the right questions to ask.</p><h2>10. Document your bug fixes</h2><p>This is related to the last tip. It&#x27;s not good enough to only recognize the questions you&#x27;re asking to find the bugs. You should also document it somehow. List your errors, their causes, and their solution somewhere. You never know when you will run into the same problem again. You don&#x27;t have to list every bug, only the ones that took a long time to find the fix for.</p><blockquote>I like to list all the bugs and their fixes that I&#x27;ve faced before using GitHub issues. You can use the labels to organize them and the search feature to find the bug fix you&#x27;re looking for.</blockquote><h2>11. Google</h2><p>Get good at googling, being able to describe your problem is key. Learn to search for keywords that will help you find solutions quicker. Also, learn to search in sites like <a href=\"https://stackoverflow.com/\">stackoverflow</a>, GitHub issue pages, discord channels, etc.</p><p>Most likely someone has already faced a similar problem. So, there is already a fix for it somewhere on the internet.</p><p></p><p>Do you have any other debugging tips? I would love to hear about it in the comments section. Thanks for reading.</p>",
            "url": "nirjan.dev/blog/11-easy-tips-to-fix-bugs-and-debug-your-code-faster",
            "title": "11 easy tips to fix bugs and debug your code faster",
            "summary": "I have a love-hate relationship with coding bugs. I hate finding and debugging them, but I love the moment that I find a fix for it. As my career progresses, I've found some things that I do over and over that help me fix bugs faster. In this post, I'll list the debugging tips that I use the most. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blog11-easy-tips-to-fix-bugs-and-debug-your-code-faster\">full post here <a /></p>",
            "date_modified": "1970-01-01T00:00:00.000Z"
        },
        {
            "id": "nirjan.dev/blog/first-remote-job-leading-a-team-learning-seo-or-2021-review-from-a-web-developer",
            "content_html": "<h2>Work update</h2><p>I joined Gfinity in December 2020 so this year I finished my first full year at <a href=\"https://www.gfinityplc.com/\">Gfinity</a>. My experience has been pretty good so far. We have a great team of talented developers from around the world. The team that I’m working on is small, so we’ve had a chance to get to know each other pretty well. I like the fact that my team can run at a startup speed without a rigid bureaucratic management team. Yet, we don&#x27;t have to constantly worry about raising money. We have a flexible remote working culture that has allowed me to improve my work-life balance.</p><p>Some notable moments for me at gfinity so far include:</p><ul><li>Being able to manage a team for the first time in my career.</li><li>Architecting a new platform (Manifold) to power the sites in our network.</li><li>First time working with SEO and Ads. It was challenging, but the experience of working with them has made me a better developer.</li><li>Learning more about improving site performance. A huge part of my job was improving the performance of the sites in our network.</li><li>Being able to improve my project management skills. This was the first time I had to actually go in-depth with project management. There are still some that I need to improve on, but I’ve made good progress in this part of my skill set. I still have a love-hate relationship with click up (our project management tool).</li></ul><h2>Interested in joining Gfinity?</h2><blockquote>If you&#x27;ve found my experience at Gfinity interesting and want to join our team, you can <a href=\"https://gfinity.hire.trakstar.com/\">apply here</a>. We have a referral program, so you can mention my name (Nirjan Khadka) in the application to help me out.</blockquote><h2>Accomplishments</h2><p>These are the things that I’m most proud of in 2021:</p><ul><li>First time leading a team of developers.</li><li>Architecting the manifold platform that will power all our sites going forward.</li><li>Being able to contribute to the decision-making process as well instead of only working on tech features.</li><li>Improving the project management process for my team.</li><li>SEO improvements made to the Gfinity Digital Media sites (ended the year at 15.5 monthly unique users).</li><li>Performance improvements made to the Gfinity Digital Media sites (went from sites loading MBs of only JavaScript and 800KB of compressed HTML to 600 KB for all resources including HTML, JS, CSS, images and fonts). We’re also close to getting a green CWV score on all the sites using our manifold platform.</li><li>Migrated two sites from WordPress and a legacy CMS over to the new manifold platform.</li><li>Kept a consistent deployment schedule for almost the entire year.</li></ul><h2>What next</h2><p>It has been an eventful year, but I expect 2022 to be even bigger. These are the things I’m most excited for in 2022</p><ul><li>Growing the GDM network (more sites, more traffic, more revenue).</li><li>Process improvements — I want to further optimize our tech precesses like sprint planning, CI/CD, automated testing, etc.</li><li>Re-architechting manifold — the first version of manifold has served its purpose well. Now we need to update it to fit the current requirements of the network.</li><li>Focusing on writing high quality tests for the most important parts of the network.</li><li>Growing the GDM community — only having high traffic is not enough. We should be aiming to have a more engaged user base and strive to provide more value to our users.</li><li>Writing more posts — There are lots of topics like SEO, web performance, CSS, project management, debugging, UI/UX,etc that I&#x27;m interested in. I&#x27;m hoping to write about them a lot more this year.</li></ul><h2>Wrapping up</h2><p>It has been a crazy challenging year in which I got to grow quite a lot in my role. Special shoutout to <a href=\"https://www.linkedin.com/in/mikenstevens/\">Mike Stevens</a>, <a href=\"https://www.linkedin.com/in/rivulent/\">Eric Ping</a> and <a href=\"https://www.linkedin.com/in/dominicneedler/\">Dominc Needler</a> at Gfinity who believed in my capabilities and trusted me to lead the amazing GDM tech team (<a href=\"https://www.linkedin.com/in/vlad-polevoi-3a0937138/\">Vlad</a>, <a href=\"https://www.linkedin.com/in/okandas/\">Raymond</a>, <a href=\"https://www.linkedin.com/in/victor-obije-a78003187/\">Victor</a>). On a personal note, I am looking forward to writing more and building more cool stuff in 2022. Happy new year, everyone!</p>",
            "url": "nirjan.dev/blog/first-remote-job-leading-a-team-learning-seo-or-2021-review-from-a-web-developer",
            "title": "First remote job, leading a team, learning SEO | 2021 review from a web developer",
            "summary": "This was a pretty big year for me. While my personal life didn’t change a lot because of the pandemic, my professional life changed quite a lot. I got my first remote role, got involved more in management and met lots of talented people. I don’t remember each moment, but I do have some highlights for the year that I want to go through in this post. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogfirst-remote-job-leading-a-team-learning-seo-or-2021-review-from-a-web-developer\">full post here <a /></p>",
            "date_modified": "1970-01-01T00:00:00.000Z"
        },
        {
            "id": "nirjan.dev/blog/how-to-build-accessible-hidden-navigation-menus-on-the-web",
            "content_html": "<h2>How most hidden Menus work</h2><p>Most hidden menus work by using JavaScript to change the styles or toggle a class to show or hide a bunch of links.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>I&#x27;ve created a <a href=\"https://codepen.io/nirjan_dev/pen/jOmbgxJ\">basic nav menu on codepen</a>. You can use that to follow along with this post.</p><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h2>Semantic HTML</h2><p>Using good semantic HTML is essential to creating accessible sites. In my example, I&#x27;ve wrapped the links in an unordered list. So, the screen reader can know how many links are there in the list.</p><p>I&#x27;ve wrapped the list in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\">nav tag</a>. I&#x27;ve then wrapped the nav tag in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\">header tag</a>. I&#x27;m also using a button to toggle the menu and not a span or a div. So, the user can focus on it by tabbing and use the button with just the keyboard. The menu button shouldn&#x27;t be a link either because it won&#x27;t link to anything.</p><p>You should always try to find the correct HTML tag for your use-case, instead of just using divs or spans everywhere. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">The elements reference page on MDN</a> is great for researching what tags to use where.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote>Note: I&#x27;m placing the Menu button inside the nav tag. This is to ensure that the people who move to the nav tag using a shortcut won&#x27;t just find a hidden list. They&#x27;ll find the button to open the nav menu. You should also make sure that the focus order makes sense. Here the next item that is focusable after the menu button is the first link in the menu.</blockquote><h2>Hiding the menu</h2><p>You need to make sure that the hidden menu is not accessible without opening it. You should use the display or visibility property to hide the menu. This makes sure that the hidden menu isn&#x27;t focused when tabbing and aren&#x27;t read by screen readers.</p><p>Be careful if you&#x27;re only using transforms, width, opacity or any other similar properties to hide the menu. Screen readers can still access them, and users can reach them by tabbing. So, you need to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/visibility\">visibility</a> property to hide the menu.</p><p>In this example, I&#x27;m using a high negative transformY value to hide the menu. So I need to use the visibility property to make sure the hidden nav is not accessible without opening it. You could also use the display property, but it can be bad for performance.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2>Communicating Menu States</h2><p>The next thing you need to do is make sure all the users of your site are aware of the menu&#x27;s open and closed states. This is simple for sighted users as they can just see the menu open and close, but you also need to make sure any users with visual impairments can tell the current state of the menu.</p><p>We need to add an aria-expanded attribute to the button. This informs the user about the current state of the button and lets them know we can open the menu using the button. We need to change the value of aria-expanded to true when it&#x27;s open and to false when it&#x27;s closed.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2>Adding Aria-controls</h2><p>The <a href=\"https://tink.uk/using-the-aria-controls-attribute/\">aria-controls attribute</a> helps screen reader users navigate from a controlling element to a controlled element. But, it is only supported in the JAWS screen reader. So you simply can’t rely on it.</p><p>The aria-controls attribute is still a nice to have feature for JAWS users and since it doesn&#x27;t do much harm, we can choose to add it to our menu.</p><p>We just need to add it to the menu button and set the value to the value of the ID for the menu.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2>Where to go from here</h2><p>If you follow all the tips mentioned in this post, then you should have a more accessible nav menu for your site. Make sure to test this using an actual screen reader.</p><p>There are other types of menus that aren&#x27;t used for site navigation. Instead, they&#x27;re used for choosing options in an app. Take a look at Heydon Pickering&#x27;s <a href=\"https://inclusive-components.design/menus-menu-buttons/\">excellent guide to building inclusive menus</a>.</p><p>If you&#x27;re using a hover menu, then it might be a good time to switch to click menus, as mentioned in <a href=\"https://css-tricks.com/in-praise-of-the-unambiguous-click-menu/\">this post on csstricks.</a></p><p>Thanks for reading. I hope this was helpful. Let me know in the comments about how you&#x27;re building you nav menus and any tips and tricks you might have on this topic.</p>",
            "url": "nirjan.dev/blog/how-to-build-accessible-hidden-navigation-menus-on-the-web",
            "title": "How to build accessible hidden navigation menus on the web",
            "summary": "Menus are all over the web, but a lot of them are inaccessible. As the people building the web, we need to make sure that everyone is able to use our sites without a problem. That's why creating accessible menu's should be part of every web developer's toolkit. In this post, I'll show you the CSS, JavaScript, HTML and ARIA attributes that you need to know to create accessible menus. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/bloghow-to-build-accessible-hidden-navigation-menus-on-the-web\">full post here <a /></p>",
            "date_modified": "1970-01-01T00:00:00.000Z"
        },
        {
            "id": "nirjan.dev/blog/step-by-step-guide-to-truncating-text-in-css-shorten-text-like-a-pro",
            "content_html": "<h2>What is text truncation?</h2><p>Truncated or shortened text is most common when you&#x27;re working on a design with equal-height columns. But generally, the text for those columns is dynamic. I had to work on a design like that at work recently.</p><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p>The category names like Mario, Nintendo, Call of Duty: Modern Warfare, etc need to be in a single line. If it doesn&#x27;t fit, then I need to truncate it. I also need to truncate the title of the article to 4 lines. So, for this specific layout, I had to do CSS text truncate for both a single line and multiple lines.</p><h2>How to do CSS text truncate?</h2><p>Let&#x27;s start off with a single line CSS text truncate with a “p” tag. You can follow along with me using this snippet. Here&#x27;s the link to the <a href=\"https://codepen.io/nirjan_dev/pen/GRWYQMr\">finished codepen</a> if you want to copy it from there.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><p>Here are the steps you need to follow to truncate this text.</p><h3>1. Setting fixed width with CSS</h3><p>You need to set a width on the element that you are targetting. So, the browser knows how long the text should be before you truncate it.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h3>2. Using the white-space property in CSS</h3><p>To avoid wrapping the text to the next line, we need to set the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/white-space\">white-space property</a> to nowrap.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h3>3. Using the overflow CSS property</h3><p>Next, you need to set the overflow property to hidden. This hides the text when it goes beyond it&#x27;s width.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h3>4. CSS text truncate with ellipsis </h3><p>We have successfully truncated the text. But it would be nice to have some sort of indication that we have truncated it. Let&#x27;s add ellipses to the end of the shortened text. We can do this by setting the text-overflow property to ellipsis.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><blockquote> All you need to remember is 4 CSS properties. Width, white-space, overflow, text-overflow or remember the acronym, <strong>WWOT</strong>. You can use &quot;We Won&#x27;t Overflow Text” as a mnemonic. You can probably come up with something better.</blockquote><p></p><h2>How do you shorten a paragraph in CSS?</h2><p>Truncating text for multiple lines is a bit more tricky. Let&#x27;s start with a simple “p” tag again, but with some more text this time and make it wider.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p>Right now, the text has 5 lines. Let&#x27;s see if we can truncate it to just 4 lines.</p><h3>How to use line clamp in CSS</h3><p>This property only works if you set the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a> property to -webkit-box or -webkit-inline-box. Also, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-orient\">-webkit-box-orient</a> property needs to be set to vertical.</p><blockquote><strong>Note</strong>: This property was originally implemented in WebKit and has some issues. It got standardized for legacy support.</blockquote><blockquote>When applied to anchor elements, the truncating can happen in the middle of the text, not necessarily at the end.</blockquote><p>Now, let&#x27;s add the new rules to our multiple-truncate class and see what will happen.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><p>It&#x27;s not quite what we were looking for. The problem with this approach is that we won&#x27;t be able to have a padding-bottom on the actual text. Otherwise, the space occupied by the bottom padding will show the truncated text. So, let&#x27;s remove the bottom padding for now.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><p>Then we need to hide the truncated text by setting the overflow to hidden.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>The downside to this approach is that you can&#x27;t have a padding-bottom on the text. You would need to add your padding to the parent or try something else.</p><p>One thing you can try is to set a border on an &quot;after&quot; pseudo-element. The border-color should be the same as the background for the text. Then, you need to set the border-width to the padding-bottom value you want. You can use an SCSS mixin or CSS variables for this to make it more robust and reusable.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><h2>CSS text Truncate issue with flexbox</h2><blockquote>Truncating text like this doesn&#x27;t work well if the element you&#x27;re truncating has a display value of flex or inline-flex. </blockquote><p>The text will still be shortened but you won&#x27;t get the ellipsis at the end. I&#x27;m not sure why it happens or if there are any workarounds for this. If you have any ideas, then let me know in the comments below.</p><h2>SCSS mixin for truncating text</h2><p>Here are two SCSS mixins that will make truncating text easier.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>You can even use CSS variables for the <strong>$paddingBottom</strong> argument and then use media queries to make it responsive without changing the mixin.</p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p></p><h2>Summary on CSS text truncate</h2><p>Here&#x27;s a quick summary of how to do text truncation with CSS:</p><ul><li>Truncated or shortened text is commonly used in designs with equal-height columns where the text is dynamic.</li><li>To truncate text in CSS, you can use the following steps:<ol><li>Set a fixed width on the element you are targeting.</li><li>Use the white-space property and set it to &#x27;nowrap&#x27; to avoid wrapping the text to the next line.</li><li>Use the overflow property and set it to &#x27;hidden&#x27; to hide the text when it goes beyond its width.</li><li>Use the text-overflow property and set it to &#x27;ellipsis&#x27; to add an indication that the text has been truncated.</li></ol></li><li>Truncating text for multiple lines is more tricky, but can be done by setting a fixed height on the element, using the display property and setting it to &#x27;-webkit-box&#x27; and &#x27;-webkit-line-clamp&#x27; and setting the number of lines to be displayed.</li></ul><p>How has your experience been with truncating text in CSS? What techniques have you tried? Do you know any other ways to do this? Let me know in the comments below. I hope this was a helpful article.</p><h2></h2>",
            "url": "nirjan.dev/blog/step-by-step-guide-to-truncating-text-in-css-shorten-text-like-a-pro",
            "title": "Step by Step guide to CSS text truncate; shorten text like a pro",
            "summary": "In this post, I'll show you how to implement a CSS text truncate. I will cover how to shorten both a single line and multiple lines. I'll also mention some common problems you may face when doing a CSS text truncate. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogstep-by-step-guide-to-truncating-text-in-css-shorten-text-like-a-pro\">full post here <a /></p>",
            "date_modified": "2023-01-25T04:29:03.255Z"
        },
        {
            "id": "nirjan.dev/blog/tips-for-beginners-learning-to-code",
            "content_html": "<p>It&#x27;s been a while since I started coding, So for this post, I decided to do something different. I want to list down some tips I&#x27;ve learned over the last two years on getting better at learning to code. So this will be like a message to my younger self which might also hopefully be useful to some other beginners just starting out.</p><h2>1. Build more cool stuff</h2><p>I think this is the number one thing that can make it easier for you to learn something whether it&#x27;s a programming language, framework or any other coding concept. Don&#x27;t just go from one tutorial to another. Take what you&#x27;ve learned and make something cool with it, Most of the time you will learn way more from building stuff than any tutorial will ever teach you.</p><p>It can be normal to develop a mindset where you think what you&#x27;ve learned so far is not enough and you can&#x27;t possibly make anything useful from it. You will always want to know more and that&#x27;s not a bad thing. But, I&#x27;m gonna let you in a little secret,</p><blockquote>No programmer on earth knows enough to always get the job done without any help, whether that help is a coworker, mentor or StackOverflow, Nobody knows enough, There&#x27;s always more to learn whether you&#x27;ve been coding for a month or 10 years.</blockquote><h2>2. Build apps that actually help you</h2><p>If you agree with my first piece of advice and decide to build things then don&#x27;t just build random things or some demo app that you saw being built in a tutorial instead identify a problem that you are facing in your day to day life, no matter how small that may seem and try to build a solution for that.</p><p>For example, you might find it hard to focus or manage your time then build a simple time tracker, if you are having a hard time managing your money then build a budget tracker, etc. (note: Don&#x27;t just build trackers, these are just examples) Doing this will make sure you are truly invested in the project and won&#x27;t give up as soon as the project becomes a little difficult.</p><h2>3. Don&#x27;t build complex apps too fast</h2><p>Sometimes it can be overwhelming to build apps that do too much. Instead, break your idea down into small pieces and focus on the most important part of your app and once that is complete then move onto other parts. You don&#x27;t have to build a complex app just a simple app that solves one problem really well. I have gone down a rabbit hole where I kept adding features and eventually just gave up on the project because it was to complex for me to handle. Take it one step at a time and don&#x27;t try to build something too complex.</p><h2>4. Be a part of the community</h2><p>Listen to coding podcasts, subscribe to coding channels, follow other developers online, be a part of the community. Don&#x27;t just be a passive observer, share your thoughts, ask questions but don&#x27;t be a dick.</p><h2>5. Take a break</h2><p>I think this is something that beginners tend to ignore. When you&#x27;re learning something or working on a new project you might lose track of time or might spend hours trying to fix something. Remember to take a break from coding, do other stuff, focus on other interests to recharge your batteries. If you are interested in a sport or any other team activity then that can be great for your work-life balance since most developers spend a lot of time sitting and staring at a screen. Don&#x27;t neglect your wellbeing because it&#x27;s really easy to get burned out when you don&#x27;t know your limits.</p><h2>Other useful tips</h2><p>There are tons of tips that I have for beginners but I consider the tips mentioned here to be the most helpful. You should be fine if you follow these tips but if you don&#x27;t then you&#x27;re never going to make it (just kidding, these are just suggestions, not rules). Take what you want from this post, it might be helpful for you or it might not but If I could go back in time then I would certainly give these tips to my past self. Here are some other tips that might be useful </p><ul><li>Share your journey online with others and document it</li><li>Try a little bit of everything(different frameworks, coding - styles, etc), you&#x27;d be surprised at what you find yourself enjoying the most</li><li>Before trying everything make sure you master the fundamentals (please don&#x27;t learn a JS framework before learning JS)</li><li>Find different ways to tackle problems</li><li>Always think critically before committing to something</li><li>Always pick readability over clever code</li><li>Don&#x27;t use <a href=\"https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33\">the DRY principle</a> for everything</li><li>Don&#x27;t use <a href=\"https://medium.com/@thisdotmedia/the-cost-of-premature-abstraction-b5d71ffd6400\">abstractions too early</a></li><li>Take a look at the project from a larger scope</li><li>Make sure most of the code you write is easily replaceable</li></ul>",
            "url": "nirjan.dev/blog/tips-for-beginners-learning-to-code",
            "title": "Tips for beginners learning to code",
            "summary": "If you're new to coding then these tips might help you out. I've listed some tips that I would have really benefited from when I was learning to code. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogtips-for-beginners-learning-to-code\">full post here <a /></p>",
            "date_modified": "1970-01-01T00:00:00.000Z"
        },
        {
            "id": "nirjan.dev/blog/understanding-this-in-javascript",
            "content_html": "<p>The keyword<strong> “</strong>this<strong>”</strong> in JavaScript has confused a lot of developers, but with just 4 simple rules, you will never be confused again. </p><p>First, you need to know one important thing  when working with the “this” keyword -</p><blockquote><em><strong>this</strong> is not author-time binding but runtime binding so it&#x27;s not about where a function is declared but how it&#x27;s called</em></blockquote><p></p><p>When I talk about <strong>“this bindings”, </strong>I simply mean, how the “this” keyword is given a value. In JavaScript, there are 4 different types of “this” bindings, and they have their own order of precedence. So here are the 4 different “this” bindings in ascending order of precedence.</p><h2>How the “this” keyword works in JavaScript — Default Binding</h2><p>Most of the function calls in your code will have the default binding. The value of this is bound to the global object (the window object when working with JavaScript in the browser). This happens when you call a function with just the function name and it&#x27;s arguments within brackets.</p><blockquote><em><strong>Note</strong>: If the function is in strict mode, then by default <strong>“this”</strong> refers to undefined. When working in a JavaScript module, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#strict_mode_for_modules\">strict mode is enabled automatically.</a></em></blockquote><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2><strong>What is the “this” keyword in a JavaScript class – Class Binding</strong></h2><p>This type of binding happens when you call a function as a method of an object. The value of <strong>this</strong> is the object itself.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>It does not matter where you declare the function, as long as you call it as a method of the object.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Only the top/last level of an object property reference chain matters.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>The most important thing to remember is that, it&#x27;s not about the function itself. It&#x27;s about how it is called. For example, here we call the foo function but since it is not called as a method of an object, we fall back to the default binding of “this”.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2><strong>How to bind this in JavaScript – Explicit Binding with call and apply</strong></h2><p>Most of the built-in functions and all user-defined functions have two special utility methods; apply and call. You can use these methods to explicitly bind the value of this. The value of “this” is easy to figure out because it is explicitly passed in as the first argument to the call or apply methods.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote><em><strong>Note</strong>: apply and call both works the same for explicitly binding “this” to a given value, but the way they<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"> pass in other arguments is a little different</a>. You may have also used the .bind() es6 method before which uses explicit binding under the hood, you can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">read more about it here</a>.</em></blockquote><h2><strong>How this works in JavaScript with the new keyword – new binding</strong></h2><p>To understand this type of binding, you need to understand how constructors work in JavaScript. In JavaScript, constructors are just functions that are called with the “new” operator in front of them. They are not attached to classes, nor are they instantiating a class. They are just regular functions hijacked by the use of the “new” keyword.</p><p>Any user-defined or built-in function can be called with a “new” in front of it, and that makes it a construction call. There is no such thing as constructor functions, but rather construction calls of functions.</p><p>These things happen when you make a construction call:</p><ol><li>A brand-new object is created.</li><li>The new object is prototype linked.</li><li>The object is set as the “this” binding for the function call</li><li>Unless the function returns its own alternate object, the new invoked function call will return the newly constructed object.</li></ol><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h2><strong>How this works in an arrow function – Arrow function binding</strong></h2><p>I know I promised there were only 4 different types of <strong>“this”</strong> binding and in the past, that was true, until es6 which introduced arrow functions.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Arrow functions are not just a quicker way to write functions, but they also do “this” binding a little different. They use <strong>lexical scope</strong> for “this”. To learn more about lexical scope, check out my <span class=\"unknown__pt__mark__internalLink\">guide to lexical scope and closure</span>.</p><p>They inherit the value of <strong>“this”</strong> from their outer function. By “outer function”, I mean the function where you declare the arrow function, not where you call them.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Here&#x27;s a more complicated example, that uses the other ways to bind “this” alongside the arrow function binding.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Therefore, the <strong>“this”</strong> binding of arrow function is actually done in author-time rather than runtime like the other types of <strong>“this”</strong> binding.</p><h2><br/>&quot;this&quot; in JavaScript Summary and Cheat sheet</h2><p>Here are the things we now know about how &quot;this&quot; works in JavaScript:</p><ul><li>The &quot;this&quot; keyword in JavaScript is not author-time binding but runtime binding, meaning it&#x27;s not about where a function is declared but how it&#x27;s called</li><li>There are 4 different types of “this” bindings in JavaScript, each with its own order of precedence:<ol><li>Default Binding: the value of this is bound to the global object (the window object when working with JavaScript in the browser). If the function is in strict mode, then &quot;this&quot; refers to undefined.</li><li>Class Binding: the value of this is the object itself when calling a function as a method of an object.</li><li>Explicit Binding with call and apply: allows you to explicitly bind the value of this by passing the desired value as the first argument to the call or apply method.</li><li>Implicit Binding: the value of this is the object that the function is a property of.</li></ol></li><li>The most important thing to remember is that it&#x27;s not about the function itself, it&#x27;s about how it&#x27;s called.</li><li>Arrow functions in JavaScript do not have their own &quot;this&quot; binding, they inherit the “this” value of the surrounding scope. This means that the value of &quot;this&quot; inside an arrow function will be the same as the value of &quot;this&quot; in the code that surrounds the arrow function.<br/><br/>You can use this cheat sheet to help you find the value of <strong>“this”</strong> in JavaScript. So, next time when it&#x27;s hard to debug the value of” <strong>this”</strong> just remain calm and ask yourself these questions.</li></ul><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div>",
            "url": "nirjan.dev/blog/understanding-this-in-javascript",
            "title": "How to easily understand \"this\" in Javascript - with a simple visual chart",
            "summary": "This post will help you figure out how you can easily find out the value of “this” in JavaScript. If you're in a hurry, there's a JavaScript this keyword cheat sheet at the end. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogunderstanding-this-in-javascript\">full post here <a /></p>",
            "date_modified": "2023-01-24T04:50:19.728Z"
        },
        {
            "id": "nirjan.dev/blog/understanding-lexical-scope-and-closures-in-3-minutes",
            "content_html": "<h2>What is scope in JavaScript?</h2><p>We first need to know what we mean by scope to understand a JavaScript Closure. Scope is a set of rules that tell you where your variables and functions can be accessed from.</p><p>Depending on where you have set your variables and defined your functions, you can only access them in specific sections of your code. Here is an example of that in JavaScript.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>So what&#x27;s the deal here? Why can can we access the <em><strong>firstVariable</strong> </em>and the <strong><em>firstFunction </em></strong>but not the <strong><em>secondVariable</em></strong> and the <strong><em>secondFunction</em></strong> ? This is because of how JavaScript Scope works.</p><h2>How does Scope work in JavaScript</h2><p>JavaScript only had <strong>function scope</strong> (with a few exceptions) until the <a href=\"https://www.programiz.com/javascript/ES6\">ES6</a> version came out. This meant that, whenever you defined a new function, you created a new scope. A variable defined inside a function cannot be accessed from outside the function. </p><p>This is why we get an error when trying to log the secondVariable value and call the secondFunction.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote>Scope won&#x27;t let you access the variables that are set inside a function from the outside.</blockquote><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><h3>JavaScript Scopes are nested</h3><p>The inner scope has access to the outer scope, but the outer scope can&#x27;t access the variables set in the inner scope.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote>Scope consists of a series of bubbles that each act as a container or bucket in which identifiers are declared , these bubbles nest inside each other and this nesting is defined at author time.<br/><a href=\"https://twitter.com/getify\">Kyle Simpson</a> (Author of the <a href=\"https://github.com/getify/You-Dont-Know-JS\">You Don&#x27;t know JS series</a>)</blockquote><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><p></p><p></p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h3>How does JavaScript Scope work in ES6</h3><p>ES6 introduced two new ways to declare variables; using let and const. They can be used for block scoping. Whenever you use let or const to declare variables, they are scoped to the block (any code surrounded by a pair of curly brackets). ES6 also introduced another scope with modules, but closures work in the same way in modules too, so we don&#x27;t have to dive deep into that. If you are curious, here&#x27;s the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">MDN link to JavaScript modules</a>.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote><em><strong>note:</strong> You might have heard the term <strong>lexical scope</strong> in JavaScript which is just a technical term for scope that is defined during the code compilation process called lexing. It basically means that scope is defined when you are writing the code (declaring functions, or blocks), instead of when it is actually executed by the computer.</em></blockquote><h2>What is a Closure?</h2><p>A closure is a programming technique for allowing functions to access values that are defined outside of it. It is the combination of a function bundled together with variables that are outside of it.</p><blockquote>You have a closure when a function accesses variables defined outside of it. </blockquote><p></p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h2>What are JavaScript Closures?</h2><p>In JavaScript, because scope is nested, it is actually pretty easy to create a closure.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Since, functions can be nested, you can also use closures with nested functions like this:</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>When the outer function runs, the &#x27;a&#x27; variable is set to 666. So, You might expect the &#x27;a&#x27; variable to not be available afterwards when the function has finished running. </p><p>Since scope can be nested, the inner function still has access to the &#x27;a&#x27; variable. So, as long as some part of the code can still call the inner function, it can still remember the &#x27;a&#x27; variable. </p><p>Closures can cause functions to remember variables within their scope.</p><blockquote>With a Closure, you are combining a function with the data that it can access outside of it.</blockquote><h2>Examples of JavaScript Closures</h2><p>Closures are useful to combine a function with some internal value that it should use. This might be familiar if you have some experience with <a href=\"https://press.rebus.community/programmingfundamentals/chapter/encapsulation/\">object-oriented programming and encapsulation</a>.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>They can also be useful for creating different variations of a function, and to keep track of some value inside a function that shouldn&#x27;t be changed from anywhere else. This is pretty useful when you want to do some logging for a specific function like this:</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><h3>What is the benefit of closure in JavaScript?</h3><p>JavaScript Closures can also be used to do some performance optimization. Let&#x27;s say you have a function that needs to set a variable, but that variable takes up a lot of memory. Instead of creating that variable each time you run the function, you could use a closure to reuse it.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><blockquote>Note: while this will be more performant, it will also use more memory. So, if you also need to optimize the memory consumption then you should try something else.</blockquote><p>One of the most common use cases of JavaScript Closures is with <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous\">asynchronous JavaScript</a>. </p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>Most of the time, you might not even realize when you&#x27;re using a closure. Basically, anytime you&#x27;re using a variable that is outside a function from inside the function, you are using a closure. </p><p>So, These are some practical use cases for JavaScript Closures:</p><ul><li>Limiting the access to certain variables</li><li>Limiting the access to call certain functions</li><li>Keeping track of values across function calls</li><li>Logging function calls</li><li>Optimizing the memory usage of function calls</li><li>Creating different variations of the same function</li><li>Remembering values with asynchronous functions that get executed later</li></ul><h2>Closures can cause performance issues</h2><p>While closures can be pretty useful when you use them intentionally. Sometimes they can also lead to memory issues, because closures are stored in memory. If we create unnecessary closures frequently, then it can cause a memory leak.</p><p>We need to make sure we&#x27;re actually using the variables that are being stored in the memory. We should not create unnecessary closures too much. Let&#x27;s take a look at our example from earlier to see how closures can cause too much memory usage.</p><div style=\"display:none\">Unknown block type \"code\", specify a component for it in the `components.types` option</div><p>So, Whenever you are creating closures, you need to be aware of how much memory you are actually using.</p><div style=\"display:none\">Unknown block type \"image\", specify a component for it in the `components.types` option</div><h2>Summary of JavaScript Closures</h2><p>I hope you now have a better understanding of JavaScript Closures. Here&#x27;s what was covered in this post:</p><ul><li>Scope is a set of rules that determine where variables and functions can be accessed in code.</li><li>Until ES6, only function scope was available in JavaScript, meaning variables defined within a function could not be accessed from outside.</li><li>ES6 introduced block scoping with the “let” and “const” keywords.</li><li>JavaScript&#x27;s scope is nested, with inner scopes having access to outer scopes but not vice versa.</li><li>“Lexical scope” refers to scope that is defined during the code compilation process, rather than when the code is executed.</li><li>Closures are functions that have access to variables in their parent scope even after the parent function has returned.</li><li>Closure allows a function to remember the environment in which it was created, even after it leaves that environment.</li><li>Closures can be used to create private variables and methods, by returning inner function from outer function.</li><li>Closures can also be used to make performance optimizations.</li><li>You should use closures carefully if you want to make your apps more memory efficient.</li></ul>",
            "url": "nirjan.dev/blog/understanding-lexical-scope-and-closures-in-3-minutes",
            "title": "Javascript Closures Complete Guide - with practical use cases and examples",
            "summary": "In this post, I explain how JavaScript Closures work and what is Lexical Scope in JavaScript. In the end, I will also show you examples of JavaScript Closures. Having some previous knowledge about how JavaScript variables and functions work is necessary to continue on with this post. <p>Having trouble reading the content in your RSS reader? View the <a href=\"nirjan.dev/blogunderstanding-lexical-scope-and-closures-in-3-minutes\">full post here <a /></p>",
            "date_modified": "2023-01-23T04:58:43.316Z"
        }
    ]
}